Part I - Questions


1. What is a Graphical User Interface (GUI) and how does that differ from the Command Line Interface (CLI)?


Graphical User Interface can be used to easily make and copy files, move files around, etc. with a few mouse clicks. It is intuitive, however not good for running large amounts of code or files, especially with similar or identical information. Command Line Interface can make repetitive tasks go faster compared to GUI by using read-evaluate-print loop (REPL). This allows you to run through large files or amounts of data in a few minutes compared to GUI. 


2. What does the shell do?


The shell is simply a program which runs other programs. Can be used to run simple programs such as moving directories (called a command) or running complicated software.


3. What is the command used for listing things in a directory?


The command is ls -l.


4. What is the command used for changing directories?


The command is cd. 


5. What command would you use to get your current working directory?


I would use cd .


6. How do you get the manual for these commands?


You would use man [command here].


7. What does the shell prompt look like?


The shell prompt looks like $.


8. How would you list things in a directory in chronological order?


You would use ls -t.


9. Name two ways to get to the ‘home’ or ‘root’ directory.


You can use cd .. OR cd ~


10. What is the difference between an absolute path and a relative path?


        An absolute path always contains the root element and the complete directory list to the location or file. A relative path is relative to where you are and changes as you move around. 


11. What are the two relative path directories we talked about and what do they mean?
        
        They are . (dot), which references your current directory, and .. (dot dot) which moves you up a directory (e.g., move from /Users/mollymcv/Users/molly to /Users/mollymcv/Users).


12. Why shouldn’t you put spaces in filenames?


        The computer will read the spaces and can cause errors in transferring or reading files in a shell script. 


13. Name a way to have multiple readable words in a filename without spaces?
        
Utilizing underscores or dashes instead of spaces.


14. What is the program nano, what does it do? Do you use nano? If not, what do you use?


        The program nano is a text editor built into the terminal/unix. It used to … I use nano as well as the Jupyter Notebook occasionally for better readability. Nano is most convenient for me as it is in the terminal itself which is what I use 90% of the time. 


15. ``*`` is a form of a wildcard. What does it mean?


        * tells the program to run anything with what is after the wildcard. For example, running *.txt will tell the program to run everything in that directory that ends with .txt.


16. The following code would match what? 
                ```ls *.txt``` 


        Anything in the list which ends with .txt.


17. Why do we need to be careful with the ```mv``` command?


        You may move a directory or file somewhere where it does not belong or lose the file.


18. Why do we need to be careful with the ```rm``` command?


        You may remove something you did not intend to (including entire directories) and it is permanent. 


19. What is the difference between ```>``` and ```>>```?


        The difference between them is that > overwrites a file and >> amends a file or creates a new one.


20. What does ```head``` do? 


        Head tells the software to read the first few lines of the file you want. 


21. What is the purpose of ```|``` (pipe)?
        
        Pipe will connect two or more commands together in a string, telling the program to run the commands consecutively.


22. Interpret the following command:


        ```cat huge_file.fasta | uniq | head -n 5 >proteins.fasta```
        
        This command is reading lines from “huge_file.fasta” by unique reads that are within the first 5 lines of the specific fasta file given (proteins.fasta). 


23. What is a loop and when would you use it?


        A loop allows you to perform the same operation on multiple files or lines in a sequence. 


24. In a directory with the following files. What would the following loop do?
         
         ```apple.txt, banana.txt, orange.txt 
                $ for  filename in  *.txt; do
                > cat  ${filename}  >>fruits.txt
                > done
        
This loop would recognize those three files since they end in .txt, take the data from these files and put them into one file called fruits.txt.
        
25. What is a shell script?


        It is a small program used to save our code and potentially run it on other computers. 


26. What are the benefits of writing and running a script over typing the code in?


        It takes less time and is more efficient compared to typing in each line of code and running each file by hand. 


27. When looking at a script what does ```#``` mean? Why would you use one?


        It allows us to document our code without affecting how the code runs. 


28. What does ```grep``` stand for and what does it do?


        It stands for ‘Global Regular Expression Print’ and it is used to search a file for lines to match a regular expression.


29. What does ```find``` do?


        Finds files based on the criteria you put into the program. 




Part II - Writing Code


As part of this exercise please open the shell and practice moving around into different files.  Best practice is to try a little bit every day. Try to challenge yourself by not using the mouse. For each of the questions below type your code and the result from the shell prompt.


1. Open the shell and change directories to the desktop and list the contents, paste your code here.


mollyelizabeth@Mollys-MacBook ~ % cd desktop
mollyelizabeth@Mollys-MacBook desktop % ls
BCH 605
BIOL792DSII
Screen Shot 2021-12-01 at 7.21.58 PM.png
Screen Shot 2021-12-02 at 9.49.27 AM.png
Screen Shot 2021-12-02 at 9.49.40 AM.png
Screen Shot 2021-12-07 at 11.13.45 PM.png
Screen Shot 2021-12-07 at 11.14.02 PM.png
Screen Shot 2021-12-08 at 9.01.24 AM.png


2. Draw the file structure from the root directory into one of the folders on the desktop. You can submit a pdf with a drawing. Select three locations and type the commands for changing directories to those locations using a combination of absolute and relative paths. 


  

3. On your computer create a directory on your desktop.  Create two files without opening them that have file extensions ```.txt```. Then use wildcards to list the files in that directory.  Paste you code here.


mollyelizabeth@Mollys-MacBook desktop % mkdir hwonedir  
mollyelizabeth@Mollys-MacBook desktop % cd hwonedir
mollyelizabeth@Mollys-MacBook hwonedir % touch sampleone.txt sampletwo.txt
mollyelizabeth@Mollys-MacBook hwonedir % ls -l *.txt
-rw-r--r--  1 mollyelizabeth  staff  0 Jan 25 13:33 sampleone.txt
-rw-r--r--  1 mollyelizabeth  staff  0 Jan 25 13:33 sampletwo.txt


4. Download the file [Hutia_DNA.fasta] from the Github repo. Make a new directory on the desktop. Move the file into that directory. List the contents of the directory.  How many lines are in this file? Fasta files are a type of data file that holds DNA sequences. They are all formatted the same. The first line starts with a > and a name followed by a line break, and then DNA sequence followed by a line break. The next line starts with an > and another name followed by a line break and the DNA sequence. With that in mind, how could you use linux commands to determine how many sequences are in this file? How many sequences are in this file?


mollyelizabeth@Mollys-MacBook BIOL792DSII % mkdir samplefile2
mollyelizabeth@Mollys-MacBook BIOL792DSII % cd samplefile2
mollyelizabeth@Mollys-MacBook samplefile2 % cd ~
mollyelizabeth@Mollys-MacBook ~ % cd desktop
mollyelizabeth@Mollys-MacBook desktop % cd BIOL792DSII
mollyelizabeth@Mollys-MacBook BIOL792DSII % mv ~/desktop/BIOL792DSII/Hutia_DNA.fasta ~/desktop/samplefile2
mollyelizabeth@Mollys-MacBook ~ % cd desktop
mollyelizabeth@Mollys-MacBook desktop % cd samplefile2
mollyelizabeth@Mollys-MacBook samplefile2 % man ls
mollyelizabeth@Mollys-MacBook samplefile2 % ls 
Hutia_DNA.fasta
mollyelizabeth@Mollys-MacBook samplefile2 % wc -l Hutia_DNA.fasta
 2382004 Hutia_DNA.fasta #number of lines in the file
mollyelizabeth@Mollys-MacBook samplefile2 % grep ">" Hutia_DNA.fasta | wc -l
 1191002 # number of sequences in the file


5. Build a single line of code that would take the first 100 sequences of this file and put them in a new file called ‘MyOutputFile.fasta’. Use a combination of wc, sort and uniq in a single line of code to tell me how many unique lines are in this file.  Paste your commands and the answer here.


head -n 100 Hutia_DNA.fasta > MyOutputFile.fasta
sort MyOutputFile.fasta | uniq | wc -l 


6. Write code that would create a loop to copy all the files in one directory ending in ```.txt``` to another directory. Paste the code here.  


#!/usr/bin/sh


for f in ' *.txt'
do
cp ${f} /Users/mollyelizabeth/desktop/BIOL792DSII
done


7. Write a bash script with in-line documentation (hint #) to show how to run a made up python program (script) called 'find_taxa.py' on set of files ending in ‘.fasta’. Show in the script how to run the program on each of those files. What is the name of your script? Type the script here. 


#!/usr/bin/python3
$ touch find_taxa.py | open find_taxa.py # execute with python


Unsure of what to do next


8. From the Hutia_DNA.fasta file tell me how on how many lines do we find the pattern ‘GAGA’. What was the code used to find this?


$ grep -c “GAGA” Hutia_DNA.fasta 
304806